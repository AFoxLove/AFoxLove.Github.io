{"meta":{"title":"AFox","subtitle":"BloG","description":["AFox'BloG"],"author":"AFox","url":"https://blog.afox.love","root":"/"},"pages":[{"title":"","date":"2022-09-22T17:04:09.770Z","updated":"2022-09-22T17:04:09.770Z","comments":true,"path":"404.html","permalink":"https://blog.afox.love/404.html","excerpt":"","text":"404 很抱歉 您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"","date":"2022-10-08T21:34:18.333Z","updated":"2022-10-08T21:34:18.333Z","comments":true,"path":"about/index.html","permalink":"https://blog.afox.love/about/index.html","excerpt":"","text":"不积跬步，无以至千里。不积小流，无以成江海。 本站声明 授权协议 署名-非商业性使用-相同方式共享 4.0 国际 This is a human-readable summary of (and not a substitute for) the license. 您可以自由地：共享 — 在任何媒介以任何形式复制以及发行本作品演绎 — 修改以及转换或以本作品为基础进行创作只要你遵守许可协议条款，许可人就无法收回你的这些权利。惟须遵守下列条件：-署名 — 您必须给出适当的署名，提供指向本许可协议的链接，同时标明是否（对原始作品）作了修改。您可以用任何合理的方式来署名，但是不得以任何方式暗示许可人为您或您的使用背书。-非商业性使用 — 您不得将本作品用于商业目的。-相同方式共享 — 如果您再混合、转换或者基于本作品进行创作，您必须基于与原先许可协议相同的许可协议分发您贡献的作品。-没有附加限制 — 您不得适用法律术语或者技术措施从而限制其他人做许可协议允许的事情。声明：您不必因为公共领域的作品要素而遵守许可协议，或者您的使用被可适用的例外或限制所允许。不提供担保。许可协议可能不会给与您意图使用的所必须的所有许可。例如，其他权利比如形象权、隐私权或人格权可能限制您如何使用作品。 本站政策 本页面所列之内容为 “极狐” 网站（以下简称 “本站”）所采用之著作权规范、评论规则、免责声明、隐私政策。 一、著作权规范第 1 条 （著作权法律适用）本站所发布内容（包括但不限于文字、图表、照片、音视频、数据、代码等）之著作权，均受包括但不限于以下中华人民共和国法律法规的保护：《中华人民共和国著作权法》《信息网络传播权保护条例》第 2 条 （著作权许可协议）本站作品采用了六种著作权许可协议，转载或引用前请留意文末标注的许可协议。如您认为本站内容侵犯了您的权益，请与本站联系，本站将在核实后及时予以删除。CC BY-NC-SA 4.0：转载或引用时，需注明出处、且不得用于商业用途，细节要求见许可协议；禁止转载引用：默认禁止转载引用，如需转载或引用，请先联系作者获得授权；原作许可协议：作品由他人创作，转载或引用时，请遵守原作之著作权许可协议。来自互联网：作品来自互联网，未知来源，如有侵权请联系删除。允许规范转载：转载或引用时，需要注明出处，无其他要求限制。允许付费转载：转载或引用时，可以联系作者通过付费方式获得授权。二、评论规则第 3 条 （评论提交信息）在本站发布评论需要您留下：昵称、邮箱、网站链接（可选），相关信息的隐私处理请查阅本站《隐私政策》。您提交评论即默认接受该评论采用 CC BY-NC-SA 4.0 知识共享许可协议。第 4 条 （评论管理）发布的评论需要符合以下标准：合法、友善、相关、有益，不符合前述标准的评论将会被直接删除。如您认为您或他人发布的评论不适合展示在本站，请与本站联系，本站将在评估确认后予以删除。三、免责声明第 5 条 （个人立场）本站内容仅为个人言论，不代表站长本人所属（或曾经所属）机构的观点。评论区的内容仅代表该评论发布者的观点，不代表本站认同该言论，且不对此内容产生的影响承担责任。第 6 条 （内容责任）由于本站所发布的内容有其特定背景，而社会环境不断变化，又因获取资料信息限制，本站不对所发布内容之准确性、完整性、可靠性、可用性和及时性做保证。因此，相关读者有义务自行对所有内容在其预期用途中的适用性进行检查。在任何情况下，本站都不对因使用本站内容而造成的或与之有关的任何间接、附带或结果性损失负责或承担责任。第 7 条 （链接责任）本站所发布的内容包含有外部网站链接，仅为方便读者而设。本站在添加链接时已尽可能检查其是否违反相关法律法规，但是外部网站内容始终由其相关提供者或运营者负责，本站无法控制这些外部网站，因此本站不对其内容承担任何责任。四、隐私政策第 8 条 （隐私保护法律适用）本站依照以下中华人民共和国法律的相关规定，收集、存储、使用访客的隐私数据：《中华人民共和国个人信息保护法》《中华人民共和国网络安全法》《中华人民共和国数据安全法》由于前述的中国法律与欧盟《通用数据保护规则》（GDPR）可能存在冲突，本站不对欧盟用户提供服务。第 9 条 （信息收集）以下类型的信息可能被收集：您主动提交给本站的个人信息；有关您计算机的信息，包括但不限于 IP 地址、浏览器类型和版本以及操作系统类型和版本；有关您访问和使用本网站的信息，包括但不限于引荐来源、访问日期和时间、页面浏览量以及网站导航路径。第 10 条 （信息使用）本站可能将您的信息用于以下用途：为您提供本站的网站服务；向您发送您指定的电子邮件通知；确保本站的网站安全和防止欺诈；其他符合法律规定的合理用途。未经您的明确同意，本站不会将您的个人信息提供给任何第三方以供其或任何其他第三方用于营销。第 11 条 （第三方服务）本站提供的服务可能会包含第三方的产品和服务，或包含通往他们的链接。本站无法控制第三方的隐私政策和规则，并且不对此承担任何责任。本站也可能通过第三方获取由他们收集的您的信息。本站对这些信息的获取和使用将不受本隐私政策限制。然而，第三方能够向本站披露的信息依然会受到他们的隐私政策的限制。第 12 条 （信息披露）本站不会主动公开披露用户信息，除非出现下列情形之一：中国的法律法规规定应当公开披露的信息；与中国的国家安全、重大公共利益有关，或与犯罪侦查、起诉、审判和判决执行等有关，而应中国执法机构要求提供的；出于维护您或其他个人的生命、财产等重大合法权益但又很难得到本人同意的；您自行在本站评论区公开的个人信息；本政策另有特别规定的情况。五、政策修订第 13 条 （更新修订）本站保留在任何时间修改、修订或更新本页政策内容的权利。最后更新日期的变化表示该政策已被更新或编辑，更新或编辑的版本在发布后立即取代先前任何版本。浏览器、运营商、CDN 和其他组织或个人可能出于节省带宽或其他因素缓存本站的页面，在这种情况下导致您看到的页面内容和实际不符，应当以本站提供的为准。最后更新日期：2022 年 09 月 01 日"},{"title":"分类","date":"2022-09-16T14:16:04.181Z","updated":"2022-09-07T21:18:10.336Z","comments":true,"path":"categories/index.html","permalink":"https://blog.afox.love/categories/index.html","excerpt":"","text":""},{"title":"","date":"2022-09-22T00:05:51.305Z","updated":"2022-09-22T00:05:51.305Z","comments":true,"path":"friends/index.html","permalink":"https://blog.afox.love/friends/index.html","excerpt":"不积跬步，无以至千里。不积小流，无以成江海。","text":"不积跬步，无以至千里。不积小流，无以成江海。 举个栗子前置要求本站信息友链格式 除前三行外 其余均为可选~1234567title: # 网站名称url: # 访问地址avatar: # 头像地址description: # 描述/一句话概述screenshot: # 展示图/网站截图backgroundColor: # 头像背景颜色textColor: # 文本颜色 站点 HTTPS（大势） 网站加载速度正常（待定） 免费类域名站点请略过（潜在的不可靠性） 新创站点请略过（建议拥有一定的原创内容） 不接受一切商业性或强烈侵入类广告之站点 不接受违反中华人民共和国法律法规之站点 站点名称：AFox’BloG 访问地址：https://blog.afox.love 头像地址：https://cdn.staticaly.com/gh/AFoxLove/Chart@master/Tu/AFox.svg 描述信息：不积跬步，无以至千里。不积小流，无以成江海。"},{"title":"标签","date":"2022-09-16T14:19:04.315Z","updated":"2022-09-07T21:16:48.222Z","comments":true,"path":"tags/index.html","permalink":"https://blog.afox.love/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"解决Chrome显示无法翻译此网页","slug":"解决Chrome显示无法翻译此网页","date":"2022-09-30T16:00:00.000Z","updated":"2022-09-30T16:00:00.000Z","comments":true,"path":"post/8dd191b7.html","link":"","permalink":"https://blog.afox.love/post/8dd191b7.html","excerpt":"","text":"使用谷歌浏览器自带的谷歌翻译提示“无法翻译此网页” 修改window下的hosts文件： 在C:\\Windows\\System32\\drivers\\etc下打开hosts文件 找到需要修改的hosts文件添加如下映射（直接放到文件的最后即可） 1234567203.208.46.200 translate.google.com203.208.46.200 translate.googleapis.com或者:203.208.40.66 translate.google.com203.208.40.66 translate.googleapis.com 刷新 DNS打开控制台（win+R） 输入ipconfig /flushdns刷新DNS 提示：Windows IP 配置 已成功刷新 DNS 解析缓存。就搞定了！","categories":[{"name":"资源","slug":"资源","permalink":"https://blog.afox.love/categories/%E8%B5%84%E6%BA%90/"},{"name":"教程","slug":"资源/教程","permalink":"https://blog.afox.love/categories/%E8%B5%84%E6%BA%90/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Chrome","slug":"Chrome","permalink":"https://blog.afox.love/tags/Chrome/"}]},{"title":"解决移动端H5页面点击输入框页面放大","slug":"解决移动端H5页面点击输入框页面放大","date":"2022-09-07T16:00:00.000Z","updated":"2022-09-08T16:00:00.000Z","comments":true,"path":"post/e15e08b9.html","link":"","permalink":"https://blog.afox.love/post/e15e08b9.html","excerpt":"","text":"给.html文件加入一下代码12&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;&gt; 拆解说明apple-mobile-web-app-capable 删除苹果的默认工具栏和菜单栏。 content 默认值为 no ，即正常显示。如果设置为 yes，Web应用会以全屏模式运行，可以通过只读属性 window.navigator.standalone 来确定网页是否以全屏模式显示。 viewport meta 标签 浏览器的 viewport 是可以看到 Web 内容的窗口区域，通常与渲染出的页面的大小不同，这种情况下，浏览器会提供滚动条以滚动访问所有内容。 width 属性控制视口的宽度。可以像 width&#x3D;600 这样设为确切的像素数，或者设为 device-width 特殊值，代表缩放为 100% 时以 CSS 像素计量的屏幕宽度。 相应的也有 height 及 device-height 属性，可能对包含基于视口高度调整大小及位置的元素的页面有用。 initial-scale 属性控制页面最初加载时的缩放等级，即当页面第一次 load 的时候缩放比例。 maximum-scale 属性控制允许用户缩放到的最大比例。 minimum-scale 属性控制允许用户缩放到的最小比例。 user-scalable 属性控制用户是否可以手动缩放。","categories":[{"name":"资源","slug":"资源","permalink":"https://blog.afox.love/categories/%E8%B5%84%E6%BA%90/"},{"name":"教程","slug":"资源/教程","permalink":"https://blog.afox.love/categories/%E8%B5%84%E6%BA%90/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"https://blog.afox.love/tags/HTML/"}]},{"title":"宝塔安装部署Halo博客教程","slug":"宝塔安装部署Halo博客教程","date":"2022-09-04T16:00:00.000Z","updated":"2022-09-05T16:00:00.000Z","comments":true,"path":"post/5b220582.html","link":"","permalink":"https://blog.afox.love/post/5b220582.html","excerpt":"","text":"Halo搭建软件环境Halo 理论上可以运行在任何支持 Java 的平台。JRE（Java Runtime Environment）必须在运行环境安装好 JRE，这是运行 Halo 所要求的的最低软件环境要求。如果您使用 Docker 运行 Halo，可忽略此要求。从 1.4.3 起，版本要求为 11 以上的版本。1.4.3 以下需要 1.8 以上的版本。MySQL（可选）这并不是 Halo 必须依赖的，Halo 默认使用自带的 H2 Database，无需单独安装。如果 H2 Database 不能满足你的要求，您需要在系统内安装并运行好 MySQL。 具体要求：版本：5.7 +字符集（Character Set）：utf8mb4排序规则（Collate）：utf8mb4_bin存储引擎：InnoDBSupervisor管理器一个Python开发的通用的进程管理程序，用来管理halo运行进程，实现常驻后台。 安装教程安装JRE 11 &#x2F; CentOS1sudo yum install java-11-openjdk -y 检查版本 1java -version 如果输出以下类似内容即代表成功 1openjdk version &quot;11.0.10&quot; 2021-01-19 LTSOpenJDK Runtime Environment 18.9 (build 11.0.10+9-LTS)OpenJDK 64-Bit Server VM 18.9 (build 11.0.10+9-LTS, mixed mode, sharing) 创建新的系统用户 不推荐直接使用系统 root 用户来运行 Halo。如果您需要直接使用 root 用户，请跳过这一步。 教程使用root账户来示例。创建一个名为 halo 的用户（名字可以随意） 1useradd -m halo 给予 sudo 权限 1usermod -aG wheel halo 为 halo 用户创建密码 1passwd halo 登录到 halo 账户 1su - halo 安装Halo来到宝塔创建网站，设置目录以方便放程序文件CD进入网站目录 这里以 BLOG 为例 1cd /www/wwwroot/BLOG 下载运行包 1wget https://dl.halo.run/release/halo-1.5.4.jar -O halo.jar 创建Halo工作目录Halo 所依赖的工作目录，在 Halo 运行的时候会在系统当前用户目录下产生一个 .halo 的文件夹，绝对路径为 ~&#x2F;.halo。由于这个工作目录是固定的，所以上面所说的 运行包不限制所存放的位置 1mkdir ~/.halo &amp;&amp; cd ~/.halo 下载示例配置文件到工作目录 1wget https://dl.halo.run/config/application-template.yaml -O ./application.yaml 编辑配置文件，配置数据库或者端口等，如需配置请参考 配置参考 1vim application.yaml 测试运行 Halo进入网站目录执行运行命令 1cd /www/wwwroot/BLOG &amp;&amp; java -jar halo.jar 如看到类似以下日志输出，则代表启动成功。 1run.halo.app.listener.StartedListener : Halo started at http://127.0.0.1:8090run.halo.app.listener.StartedListener : Halo admin started at http://127.0.0.1:8090/adminrun.halo.app.listener.StartedListener : Halo has started successfully! 别忘记在宝塔的防火墙或者服务器防火墙放行Halo端口8090 网站部署使用 Supervisor 托管 Halo 进程打开 Supervisor 管理器的设置，点击 添加守护进程 按钮。需要填写的表单信息如下： 名称：随意启动用户：如果您按照 在 Linux 环境部署 创建了用于运行 Halo 的用户，则选择您创建的用户即可。否则选择默认的 root。运行目录：运行包的存放目录，按照实际情况填写，需要保证你所选的目录包含运行包。启动命令：【java -server -Xms256m -Xmx256m -jar halo.jar】填写完成之后点击 确定 按钮即可。 部署ssl证书我这边使用宝塔免费证书示例，需要开启强制ssl 添加反代理在反向代理中添加并设置 名称：随意 目标URL：127.0.0.1:8090 访问域名即可进行 Halo 的初始化。","categories":[{"name":"资源","slug":"资源","permalink":"https://blog.afox.love/categories/%E8%B5%84%E6%BA%90/"},{"name":"教程","slug":"资源/教程","permalink":"https://blog.afox.love/categories/%E8%B5%84%E6%BA%90/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Halo","slug":"Halo","permalink":"https://blog.afox.love/tags/Halo/"}]},{"title":"宝塔安装部署Cloudreve教程","slug":"宝塔安装部署Cloudreve教程","date":"2022-09-02T16:00:00.000Z","updated":"2022-09-12T04:00:00.000Z","comments":true,"path":"post/5bdc13b8.html","link":"","permalink":"https://blog.afox.love/post/5bdc13b8.html","excerpt":"","text":"📌 官方资料官网：https://cloudreve.org文档：https://docs.cloudreve.org/getting-started/install社区：https://forum.cloudreve.org源码：https://github.com/cloudreve/Cloudreve演示：https://demo.cloudreve.org演示：https://cloud.chin-a.xyz ✨ 特性☁️ 支持本机、从机、七牛、阿里云 OSS、腾讯云 COS、又拍云、OneDrive (包括世纪互联版) 作为存储端📤 上传&#x2F;下载 支持客户端直传，支持下载限速💾 可对接 Aria2 离线下载，可使用多个从机节点分担下载任务📚 在线 压缩&#x2F;解压缩、多文件打包下载💻 覆盖全部存储策略的 WebDAV 协议支持⚡ 拖拽上传、目录上传、流式上传处理🗃️ 文件拖拽管理👩‍👧‍👦 多用户、用户组🔗 创建文件、目录的分享链接，可设定自动过期👁️‍🗨️ 视频、图像、音频、文本、Office 文档在线预览🎨 自定义配色、黑暗模式、PWA 应用、全站单页应用🚀 All-In-One 打包，开箱即用🌈 … … 🛠️ 安装部署 来到宝塔面板创建网站 设置目录以方便放程序文件在宝塔面板的左侧菜单栏有一个 终端 菜单 点击进入是一个黑窗口 接下来我们就在这里安装整个服务。 查看服务内核在宝塔终端查看服务内核，因为不同云服务下可能是 ++adm++ 或者 ++arm++ 架构，对应下载的 Cloudreve 也会有所不同 ++cloudreve_版本号_操作系统_CPU架构.tar.gz++，所以这里我们需要使用 ++arch++ 命令查看下服务信息。SHH界面输入代码 ++arch++ 查看输出结果++x86_64++代表++amd64++；++aarch64++代表++arm64++ 12345Last failed login: Sat Apr 10 11:38:41 CST 2021 from 194.165.16.68 on ssh:nottyThere were 8 failed login attempts since the last successful login.Last login: Sat Apr 10 09:57:33 2021 from 127.0.0.1[root@VM-8-9-centos ~]# archx86_64 下载 获取Cloudreve 安装包下载或复制对应链接适用于您目标机器操作系统,CPU架构的主程序,直接上传运行即可。 宝塔执行以下命令进入网站目录 1cd /www/wwwroot/cloudreve 下载安装包 1wget https://github.com/cloudreve/Cloudreve/releases/download/3.5.3/cloudreve_3.5.3_linux_amd64.tar.gz 解压程序包 1tar -zxvf cloudreve_3.5.3_linux_amd64.tar.gz 赋予执行权限 1chmod +x ./cloudreve 启动 Cloudreve 1./cloudreve 大功告成 保存初始账号和密码初始账号密码只出现一次切记保存以上为最简单的部署示例，您可以参考 官方文档 - 起步 进行更为完善的部署。 补充开放端口 5212Cloudreve 安装完成以后，访问地址为你的 服务器IP:5212，但此时5212并不能直接访问还需要授权放行。仅在宝塔后台授权还不够，还需要在云服务平台的防火墙进行授权放行。使用使用 Supervisor 托管 Cloudreve 进程需要填写的表单信息如下：名称：随意启动用户：如果您按照 在 Linux 环境部署 则选择您创建的用户即可。否则选择默认的 root。运行目录：运行包的存放目录，按照实际情况填写，需要保证你所选的目录包含运行包。此处为：&#x2F;www&#x2F;wwwroot&#x2F;cloudreve启动命令：&#x2F;www&#x2F;wwwroot&#x2F;cloudreve&#x2F;cloudreve填写完成之后点击 确定 按钮即可。部署SSL证书我这边使用宝塔免费证书示例，需要开启强制ssl设置反向代理 绑定域名访问在反向代理中添加并设置 名称：随意 目标URL：127.0.0.1:5212最后 如果你的域名已经解析完成，那么现在你就可以通过域名访问你的云盘服务了，还可以上传和分享文件。 本文为AFox原创，在撰写过程中借鉴了cloudreve官方文档。","categories":[{"name":"资源","slug":"资源","permalink":"https://blog.afox.love/categories/%E8%B5%84%E6%BA%90/"},{"name":"教程","slug":"资源/教程","permalink":"https://blog.afox.love/categories/%E8%B5%84%E6%BA%90/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Cloudreve","slug":"Cloudreve","permalink":"https://blog.afox.love/tags/Cloudreve/"}]},{"title":"使用GitHub Pages搭建Hexo博客","slug":"使用GitHub Pages搭建Hexo博客","date":"2022-08-31T16:00:00.000Z","updated":"2022-09-01T16:00:00.000Z","comments":true,"path":"post/5a0d57ed.html","link":"","permalink":"https://blog.afox.love/post/5a0d57ed.html","excerpt":"","text":"了解Hexo和Github Pages最开始我们可能都会产生几个疑问,什么是Hexo和Github Pages？为什么要用Hexo和Github这两个呢？什么是Hexo和Github Pages Hexo是一款基于Node.js的静态博客框架,依赖少,易于安装使用,使用 Markdown（或其他渲染引擎）解析文章。Github Pages可以被认为是用户编写的,托管在github上的静态网页。 因为Hexo仅仅是一个现成的博客框架,搭建完成后只能在本地看到,如果想在网络中搜索到我们的博客空间,就必须借助服务器,来把我们的博客发布到网络上,服务器有很多种,如阿里云等。而Hexo可以生成静态网页托管在GitHub和Heroku上,此时的Github Pages就起到了免费服务器的作用,所以我们选用了Github作为服务器。 我建议最好是在自己的笔记本电脑上搭建,因为笔记本电脑可以随身携带,这样有什么感悟想写在博客里的,可以随时下笔。知道了本次行动的目的,接下来就是决战的时刻了！ 安装Node.Js和Git Node.Js下载地址-http://nodejs.cn Git下载地址-https://git-scm.com安装过程一直Next就可以了(安装路径可以改) 打开CMD命令行(win+r 输入cmd回车)分别执行123node -vnpm -vgit --version 如果都可以成功运行出现版本信息证明安装成功。 搭建Hexo官网文档https://hexo.io/zh-cn/docs/ Hexo安装选择一个磁盘,新建一个文件夹,自己重命名文件夹（如我的文件夹为：D:\\AFox）,博客相关文件将储存在此文件夹下,在该文件夹下右键鼠标,点击 Git Bash Here,输入用来安装Hexo的npm命令即可安装。 1npm install hexo-cli -g Hexo初始化配置1hexo init &amp;&amp; npm install Hexo初始化配置安装完成后,将会在指定文件夹中新建所需要的文件。 查看效果执行命令,生成博客和启动本地服务器： 12hexo ghexo s 显示以下信息说明操作成功： 1INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop. 此时即可登录 http://localhost:4000 查看效果,按Ctrl+C终止本地服务器。 注册Github账号以及建立仓库和连接（已有账号可省略）在Github官网中 https://github.com/ 注册账号,如果加载慢有可能是网络问题,多刷几次就好。 创建仓库使用Github的仓库作为Hexo博客的服务器,将Hexo的所有内容都装在仓库里,让所有人都能够通过Github来访问。点击New repository开始创建注意:仓库名一定要采用“Github用户名.github.io”的形式。 生成SSH Keys需要使用SSH将GitHub与本地进行绑定,配置好SSH密钥后,我们便可以通过Git操作实现本地代码库与Github代码库同步。 在博客文件夹目录里面（如我的文件夹为：D:\\AFox）点击鼠标右键，找到 Git Bash Here 输入命令：1ssh-keygen -t rsa -C &quot;your email@example.com&quot; 引号里面填写你的注册时的邮箱地址，比如&#x78;&#120;&#x78;&#x78;&#x78;&#x78;&#x78;&#x78;&#x40;&#x31;&#x36;&#51;&#46;&#x63;&#x6f;&#109;第一次回车 之后会出现：123Generating public/private rsa key pair.Enter file in which to save the key (/c/Users/you/.ssh/id_rsa)://到这里可以直接回车将密钥按默认文件进行存储 第二次回车 然后会出现：1234Enter passphrase (empty for no passphrase)://这里是要你输入密码，其实不需要输什么密码，直接回车就行Enter same passphrase again://再回车 第三次回车,第四次回车 接下来屏幕会显示：123456Your identification has been saved in /c/Users/you/.ssh/id_rsa.Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.The key fingerprint is://这里是各种字母数字组成的字符串，结尾是你的邮箱The key&#x27;s randomart image is://这里也是各种字母数字符号组成的字符串 四次回车后,我们的SSH keys就已经生成了,存在C:&#x2F;Users&#x2F;自己电脑的用户名（如未新建，默认是Administrator）&#x2F;.ssh&#x2F;id_rsa.pub文件中。获取SSH Keys，有两种方式：第一种 找到点击鼠标右键用记事本打开,使用Ctrl+A将内容全选,Ctrl+C复制。第二种 运行以下命令,将公钥的内容复制到系统粘贴板上：1$ clip &lt; ~/.ssh/id_rsa.pub 这时,你获得到了本地与Github连接的公钥！ 在GitHub账户中添加你的公钥 登陆GitHub,点击又上角头像选择 Setting 进入 点击 SSH and GPG Keys 选择 New SSH key 添加SSH keys Title: 可以随意填写（如我的为：AFox’BloG） Key: 粘贴我们复制的SSH KEYS最后点击 ADD SSH KEY 完成添加 测试SSH是否绑定成功输入以下命令注意：&#x67;&#x69;&#116;&#64;&#103;&#x69;&#x74;&#104;&#117;&#x62;&#x2e;&#x63;&#111;&#x6d;不要做任何更改！ 1ssh -T git@github.com 回车,再次输入yes后回车,就会显示 1Hi AmberYu2218! You&#x27;ve successfully authenticated, but GitHub does not provide shell access. 配置Git个人信息Git 会根据用户的名字和邮箱来记录提交,GitHub 也是用这些信息来做权限的处理输入以下命令进行个人信息的设置,把名称和邮箱替换成自己的,名字可以不是GitHub的昵称,但为了方便记忆,建议与GitHub一致。 12$ git config --global user.name &quot;此处填你的用户名&quot;$ git config --global user.email &quot;此处填你的邮箱&quot; 到此为止SSH就在GitHub上绑定成功了,本地与Github成功连接。 Hexo发布将Hexo部署到Github Pages中 登录 Github 打开自己的项目 AFoxLove.github.io 点击仓库文件又上方Code复制仓库的地址 打开之前创建的Hexo博客文件夹（如我的文件夹为：D:\\AFox）,点击鼠标右键用记事本（或者Notepad++、Vs Code等）打开该文件夹下的 _config.yml 文件,将该文件最底部的deploy关键字代码:12deploy: type: 修改为:（注意：所有英文冒号后面都有一个空格, repository后面的是第2步获取到的仓库地址）1234deploy: type: git repository: https://github.com/xxx/xxx.github.io.git branch: main 安装hexo-deployer-git自动部署发布工具,即将 Hexo 部署到 Git pages 的 deployer回到创建的博客目录文件夹单击鼠标右键找到并打开Git Bash,输入命令：1npm install hexo-deployer-git --save 推荐安装文章链接优化插件Abbrlink,Git Bash输入命令：(自由选择是否安装)1npm install hexo-abbrlink --save 然后在 Hexo 的根目录的配置文件_config.yml 中修改：1234permalink: post/:abbrlink.htmlabbrlink: alg: crc32 # 算法：crc16(default) and crc32 rep: hex # 进制：dec(default) and hex 最后在 博客目录 文件夹下单击鼠标右键找到并打开Git Bash分别执行以下命令:123清空缓存：hexo clean生成博客：hexo g部署博客：hexo d hexo d之后会先弹出来窗口填写用户名,这里需要输入Github的用户名 令牌代替密码重点来了！！！输用户名完毕之后会再弹出一个填写密码的提示框这个密码不是Github的密码,也不是SSH keys,而是Github更新之后的令牌,令牌需要自己设置,设置步骤如下 登陆GitHub,点击又上角头像选择 Setting 进入 找到Settings中的Developer settings(开发者设置),点击进入 其中有一个Personal access tokens,点进去就可以设置Generate new token了 生成令牌 Note: 可以随意填写（如我的为：AFox’BloG） Expiratino: 设置令牌有效期 Select scopes: 建议下面的选项全部进行勾选最后点击 Generate token 完成令牌生成点击Generate token后,会显示生成的一段代替密码的序列号,一键复制之后将它存在方便找到的地方,因为下一次使用令牌时这里的序列号将被隐藏。将token输入到之前那个填写密码的提示框中,文件就会被全部上传到仓库中了。 至此博客部署完成 通过网址查看你的博客：https://Github用户名.github.io Hexo官网https://hexo.io/zh-cn/","categories":[{"name":"资源","slug":"资源","permalink":"https://blog.afox.love/categories/%E8%B5%84%E6%BA%90/"},{"name":"教程","slug":"资源/教程","permalink":"https://blog.afox.love/categories/%E8%B5%84%E6%BA%90/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://blog.afox.love/tags/Hexo/"},{"name":"GitHub","slug":"GitHub","permalink":"https://blog.afox.love/tags/GitHub/"}]}],"categories":[{"name":"资源","slug":"资源","permalink":"https://blog.afox.love/categories/%E8%B5%84%E6%BA%90/"},{"name":"教程","slug":"资源/教程","permalink":"https://blog.afox.love/categories/%E8%B5%84%E6%BA%90/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Chrome","slug":"Chrome","permalink":"https://blog.afox.love/tags/Chrome/"},{"name":"HTML","slug":"HTML","permalink":"https://blog.afox.love/tags/HTML/"},{"name":"Halo","slug":"Halo","permalink":"https://blog.afox.love/tags/Halo/"},{"name":"Cloudreve","slug":"Cloudreve","permalink":"https://blog.afox.love/tags/Cloudreve/"},{"name":"Hexo","slug":"Hexo","permalink":"https://blog.afox.love/tags/Hexo/"},{"name":"GitHub","slug":"GitHub","permalink":"https://blog.afox.love/tags/GitHub/"}]}